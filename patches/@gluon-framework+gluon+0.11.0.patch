diff --git a/node_modules/@gluon-framework/gluon/gluon.d.ts b/node_modules/@gluon-framework/gluon/gluon.d.ts
index b8ab282..ae50985 100644
--- a/node_modules/@gluon-framework/gluon/gluon.d.ts
+++ b/node_modules/@gluon-framework/gluon/gluon.d.ts
@@ -248,7 +248,13 @@ type OpenOptions = {
   forceBrowser?: Browser,
 
   /** Force Gluon to use a specific browser engine instead of automatically finding a browser itself. */
-  forceEngine?: BrowserEngine
+  forceEngine?: BrowserEngine,
+
+  /** Defines the default window size to open with. */
+  windowSize?: [number, number],
+
+  /** Function to run when the window is closed. */
+  onClose?: Function
 };
 
 /**
diff --git a/node_modules/@gluon-framework/gluon/src/index.js b/node_modules/@gluon-framework/gluon/src/index.js
index 992171b..a7048c2 100644
--- a/node_modules/@gluon-framework/gluon/src/index.js
+++ b/node_modules/@gluon-framework/gluon/src/index.js
@@ -169,7 +169,7 @@ const getBrowserType = name => { // todo: not need this
 const portRange = [ 10000, 60000 ];
 const generatePort = () => (Math.floor(Math.random() * (portRange[1] - portRange[0] + 1)) + portRange[0]);
 
-const startBrowser = async (url, { windowSize, forceBrowser, forceEngine }) => {
+const startBrowser = async (url, { windowSize, forceBrowser, forceEngine, onClose }) => {
   const [ browserPath, browserName ] = await findBrowserPath(forceBrowser, forceEngine);
   const browserFriendlyName = getFriendlyName(browserName);
 
@@ -187,6 +187,7 @@ const startBrowser = async (url, { windowSize, forceBrowser, forceEngine }) => {
 
   const closeHandlers = [];
   if (openingLocal && browserType === 'firefox') closeHandlers.push(await LocalServer({ localUrl, url: basePath }));
+  if (onClose) closeHandlers.push(onClose);
 
   const Window = await (browserType === 'firefox' ? Firefox : Chromium)({
     dataPath,
@@ -205,10 +206,10 @@ const startBrowser = async (url, { windowSize, forceBrowser, forceEngine }) => {
   return Window;
 };
 
-export const open = async (url, { windowSize, onLoad, forceBrowser, forceEngine } = {}) => {
+export const open = async (url, { windowSize, onLoad, forceBrowser, forceEngine, onClose } = {}) => {
   log('starting browser...');
 
-  const Browser = await startBrowser(url, { windowSize, forceBrowser, forceEngine });
+  const Browser = await startBrowser(url, { windowSize, forceBrowser, forceEngine, onClose });
 
   if (onLoad) {
     const toRun = `(() => {
